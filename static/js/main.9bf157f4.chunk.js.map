{"version":3,"sources":["Views/Main/main.js","Views/Root/Root.js","App.js","redux/counter/index.js","redux/counter/reducer.js","redux/rootReducer.js","store.js","serviceWorker.js","i18n.js","locales/es_ES/index.js","locales/en_EN/index.js","index.js"],"names":["Main","class","href","Component","Root","path","children","App","PLUS_ONE","initialState","counter","rootReducer","combineReducers","state","action","type","store","createStore","Boolean","window","location","hostname","match","resources","es_ES","translation","Navbar","SimpleDescription","en_EN","i18n","use","initReactI18next","init","fallbackLng","debug","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+eAEaA,EAAb,4JACE,WACE,OACE,qBAAKC,MAAM,aAAX,SACE,sBAAKA,MAAM,mGAAX,UACE,qBAAIA,MAAM,mEAAV,UACE,sBAAMA,MAAM,QAAZ,+BACA,sBAAMA,MAAM,wBAAZ,6CAEF,sBAAKA,MAAM,qCAAX,UACE,qBAAKA,MAAM,gCAAX,SACE,mBACEC,KAAK,IACLD,MAAM,4JAFR,2BAOF,qBAAKA,MAAM,qCAAX,SACE,mBACEC,KAAK,IACLD,MAAM,2JAFR,sCAnBd,GAA0BE,aAiCXH,IC5BFI,G,MAAb,4JACE,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UAAS,cAAC,IAAD,CAAOC,KAAK,IAAIC,SAAU,cAAC,EAAD,cAJ3C,GAA0BH,cAUXC,ICbFG,EAAb,4JACE,WACE,OAAO,cAAC,EAAD,QAFX,GAAyBJ,aAMVI,I,QCVFC,EAAW,WCElBC,EAAe,CACnBC,QAAS,GCAX,IAAMC,EAAcC,YAAgB,CAClCF,QDEa,WAAuD,IAA/BG,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCACnE,OAAQA,EAAOC,OACRP,EACI,CACLE,QAASG,EAAMH,QAAU,GAIpBG,KCLEF,ICJAK,EAFDC,YAAYN,G,QCSNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCbAC,EAAY,CAChBC,MAAO,CACLC,YCLiB,CACnBC,O,MACAC,kB,QDKAC,MAAO,CACLH,YERiB,CACnBC,O,MACAC,kB,SFUFE,IAAKC,IAAIC,KAAkBC,KAAK,CAC9BT,YACAU,YAAa,QACbC,OAAO,IAGML,EAAf,EGXAM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUrB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJsB,SAASC,eAAe,SJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.9bf157f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Main extends Component {\r\n  render() {\r\n    return (\r\n      <div class=\"bg-gray-50\">\r\n        <div class=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:py-16 lg:px-8 lg:flex lg:items-center lg:justify-between\">\r\n          <h2 class=\"text-3xl font-extrabold tracking-tight text-gray-900 sm:text-4xl\">\r\n            <span class=\"block\">Ready to dive in?</span>\r\n            <span class=\"block text-indigo-600\">Start your free trial today.</span>\r\n          </h2>\r\n          <div class=\"mt-8 flex lg:mt-0 lg:flex-shrink-0\">\r\n            <div class=\"inline-flex rounded-md shadow\">\r\n              <a\r\n                href=\"#\"\r\n                class=\"inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700\"\r\n              >\r\n                Get started\r\n              </a>\r\n            </div>\r\n            <div class=\"ml-3 inline-flex rounded-md shadow\">\r\n              <a\r\n                href=\"#\"\r\n                class=\"inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50\"\r\n              >\r\n                Learn more\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Main  from '../Main/main.js';\r\n\r\n\r\nimport './Root.css';\r\n\r\nexport class Root extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>{<Route path=\"/\" children={<Main />} />}</Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Root;\r\n","import React, { Component } from 'react';\n// import AppBar from \"./Shared/Components/AppBar/AppBar\";\n// import Main from \"./Views/Main/Main\";\nimport Root from './Views/Root/Root';\nexport class App extends Component {\n  render() {\n    return <Root />;\n  }\n}\n\nexport default App;\n","export const PLUS_ONE = \"PLUS_ONE\";\r\n","import { PLUS_ONE } from \"./index\";\r\n\r\nconst initialState = {\r\n  counter: 0,\r\n};\r\n\r\nexport default function counterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case PLUS_ONE: {\r\n      return {\r\n        counter: state.counter + 1,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport counterReducer from \"./counter/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n});\r\n\r\n\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from \"./redux/rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport translationES from './locales/es_ES/index.js';\r\nimport translationEN from './locales/en_EN/index.js';\r\n\r\nconst resources = {\r\n  es_ES: {\r\n    translation: translationES,\r\n  },\r\n  en_EN: {\r\n    translation: translationEN,\r\n  },\r\n};\r\n\r\ni18n.use(initReactI18next).init({\r\n  resources,\r\n  fallbackLng: 'en_EN',\r\n  debug: true,\r\n});\r\n\r\nexport default i18n;\r\n","import Navbar from './Navbar.json';\r\nimport SimpleDescription from './SimpleDescription.json';\r\nconst translations = {\r\n  Navbar: Navbar,\r\n  SimpleDescription: SimpleDescription,\r\n};\r\nexport default translations;\r\n","import Navbar from './Navbar.json';\r\nimport SimpleDescription from './SimpleDescription.json';\r\nconst translations = {\r\n  Navbar: Navbar,\r\n  SimpleDescription: SimpleDescription,\r\n};\r\nexport default translations;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}